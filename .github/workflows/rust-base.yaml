name: 'Rust Base CI'
on:
  workflow_call:
    inputs:
      rust-channel:
        description: 'Rust channel to use (stable, beta, nightly, or specific version like 1.70.0)'
        required: false
        default: 'stable'
        type: string
      install-foundry:
        description: 'Installs foundry as a pre-test step'
        required: false
        default: false
        type: boolean
      require-lockfile:
        description: 'Require a Cargo.lock file to be present'
        required: false
        default: false
        type: boolean
      requires-private-deps:
        description: 'Requires private dependencies to be fetched, sets up ssh-agent'
        required: false
        default: false
        type: boolean
      rust-profile:
        description: 'The profile to give to cargo for running, defaults to dev'
        required: false
        default: 'dev'
        type: string
      dind:
        description: 'Use a DIND runner'
        required: false
        default: false
        type: boolean
      submodules:
        description: 'Update git submodules'
        required: false
        default: 'false'
        type: string
      # Define feature sets to test for each relevant job
      # Input should be a JSON string array, e.g., '["", "--all-features", "--no-default-features --features=foo,bar"]'
      # "" means default features.
      test-feature-sets:
        description: 'JSON array of feature flag strings for cargo test (e.g., "", "--all-features")'
        required: false
        default: '["--all-features"]' # Default to testing all features if possible
        type: string
      clippy-feature-sets:
        description: 'JSON array of feature flag strings for cargo clippy (e.g., "", "--no-default-features --features=feat1")'
        required: false
        default: '[""]' # Default to checking only default features, often safer for clippy
        type: string
      docs-feature-sets:
        description: 'JSON array of feature flag strings for cargo doc (e.g., "", "--all-features")'
        required: false
        default: '["--all-features"]' # Default to documenting all features
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        description: 'SSH private key for fetching private dependencies'
        required: false
jobs:
  test:
    # Add matrix feature set to the name if more than one set is provided
    name: Test Suite (${{ inputs.rust-channel }}${{ fromJSON(inputs.test-feature-sets)[1] && format(' / matrix {0}', strategy.job-index + 1) || '' }}${{ inputs.require-lockfile == true && ' / locked' || '' }})
    runs-on:
      group: big-bois
    strategy:
      fail-fast: false # Don't cancel other matrix jobs if one fails
      matrix:
        # Create a matrix based on the provided feature sets
        feature-set: ${{ fromJSON(inputs.test-feature-sets) }}
    services:
      docker:
        image: ${{ inputs.dind && 'docker:dind' || 'alpine:latest' }}
        options: ${{ inputs.dind && '--privileged --shm-size=2g' || '' }}
        volumes: ${{ inputs.dind && fromJSON('["/var/run/docker.sock:/var/run/docker.sock:ro"]') || fromJSON('[]') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.submodules }}
      - name: Setup ssh-agent
        if: ${{ inputs.requires-private-deps == true }}
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust-channel }}
      - uses: Swatinem/rust-cache@v2
        with:
          # Include matrix variable and lockfile status in cache key
          key: ${{ inputs.rust-channel }}-test-${{ inputs.require-lockfile }}-${{ matrix.feature-set }}
      - uses: taiki-e/install-action@nextest
      - name: Optional Foundry Install
        if: ${{ inputs.install-foundry == true }}
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - name: Run tests (${{ matrix.feature-set || 'default' }})
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        # Construct the command dynamically
        run: |
          cargo nextest run --workspace ${{ inputs.require-lockfile == true && '--locked' || '' }} ${{ matrix.feature-set }} --cargo-profile ${{ inputs.rust-profile }} --no-tests=warn

  rustfmt:
    name: Rustfmt (${{ inputs.rust-channel }}) # Rustfmt doesn't usually depend on features
    runs-on:
      group: big-bois
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust-channel }}
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ inputs.rust-channel }}-fmt
      - name: Check formatting
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        run: cargo fmt --all --check

  clippy:
    name: Clippy (${{ inputs.rust-channel }}${{ fromJSON(inputs.clippy-feature-sets)[1] && format(' / matrix {0}', strategy.job-index + 1) || '' }}${{ inputs.require-lockfile == true && ' / locked' || '' }})
    runs-on:
      group: big-bois
    strategy:
      fail-fast: false
      matrix:
        feature-set: ${{ fromJSON(inputs.clippy-feature-sets) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup ssh-agent
        if: ${{ inputs.requires-private-deps == true }}
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust-channel }}
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ inputs.rust-channel }}-clippy-${{ inputs.require-lockfile }}-${{ matrix.feature-set }}
      - name: Clippy check (${{ matrix.feature-set || 'default' }})
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        run: |
          cargo clippy --all-targets --workspace ${{ inputs.require-lockfile == true && '--locked' || '' }} ${{ matrix.feature-set }} --profile ${{ inputs.rust-profile }} -- -D warnings

  docs:
    name: Docs (${{ inputs.rust-channel }}${{ fromJSON(inputs.docs-feature-sets)[1] && format(' / matrix {0}', strategy.job-index + 1) || '' }}${{ inputs.require-lockfile == true && ' / locked' || '' }})
    runs-on:
      group: big-bois
    strategy:
      fail-fast: false
      matrix:
        feature-set: ${{ fromJSON(inputs.docs-feature-sets) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup ssh-agent
        if: ${{ inputs.requires-private-deps == true }}
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ inputs.rust-channel }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ inputs.rust-channel }}-docs-${{ inputs.require-lockfile }}-${{ matrix.feature-set }}
      - name: Check documentation (${{ matrix.feature-set || 'default' }})
        env:
          RUSTDOCFLAGS: -D warnings
          CARGO_NET_GIT_FETCH_WITH_CLI: true
        run: |
          cargo doc --no-deps --document-private-items --workspace --examples ${{ inputs.require-lockfile == true && '--locked' || '' }} ${{ matrix.feature-set }} --profile ${{ inputs.rust-profile }}