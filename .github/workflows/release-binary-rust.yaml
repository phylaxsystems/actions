name: Release Rust Binary

on:
  workflow_call:
    inputs:
      # Inputs for building
      binary-name:
        description: 'Name of the binary to release'
        required: true
        type: string
      rust-channel:
        description: 'Rust channel to use (stable, beta, nightly, or specific version like 1.70.0)'
        required: false
        default: 'stable'
        type: string

      # Inputs for release creation
      tag:
        description: "The tag to create a release from (defaults to github.ref_name)"
        required: false
        type: string
      release_name:
        description: "Name of the release (defaults to the tag name)"
        required: false
        type: string
      draft:
        description: "Create a draft release and leave it as a draft. If false, a draft is created, assets are uploaded, and then it is published."
        required: false
        type: boolean
        default: false
      prerelease:
        description: "Mark as prerelease"
        required: false
        type: boolean
        default: false
      generate_release_notes:
        description: "Automatically generate release notes"
        required: false
        type: boolean
        default: true
    secrets:
      SSH_PRIVATE_KEY:
        description: "SSH private key needed for creating the GitHub Release"
        required: true

permissions:
  contents: write

jobs:
  create-release:
    name: Create Draft Release
    # Uses the other reusable workflow from this same repository.
    uses: ./.github/workflows/release-github.yaml
    with:
      tag: ${{ inputs.tag }}
      release_name: ${{ inputs.release_name }}
      # We always create a draft first. We'll publish it in a later job.
      draft: true
      prerelease: ${{ inputs.prerelease }}
      generate_release_notes: ${{ inputs.generate_release_notes }}
    secrets:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

  build-and-upload:
    name: Build and Upload Binaries
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            os: linux
            arch: x86_64
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-musl
            os: alpine
            arch: x86_64
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            os: linux
            arch: arm64
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-musl
            os: alpine
            arch: arm64
          - runner: macos-latest
            target: x86_64-apple-darwin
            os: macos
            # The architecture for the tarball name should match the target architecture.
            arch: x86_64
          - runner: macos-latest
            target: aarch64-apple-darwin
            os: macos
            arch: arm64
    runs-on: ${{ matrix.runner }}
    steps:
    - uses: actions/checkout@v4
    - name: Install build dependencies
      if: contains(matrix.target, 'musl')
      run: sudo apt-get update && sudo apt-get install -y musl-tools
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        toolchain: ${{ inputs.rust-channel }}
    - uses: Swatinem/rust-cache@v2
    - name: Cargo Build Release
      run: cargo build --release --target ${{ matrix.target }} --locked
    - name: Tarball Binaries
      run: |
        # Create a directory with the binary name to have a consistent structure in the tarball
        mkdir -p ${{ inputs.binary-name }}
        cp target/${{ matrix.target }}/release/${{ inputs.binary-name }} ${{ inputs.binary-name }}/
        tar -czf release-${{ matrix.os}}-${{ matrix.arch }}.tar.gz ${{ inputs.binary-name }}
    - name: Upload Release Asset
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh release upload ${{ needs.create-release.outputs.tag_name }} release-${{ matrix.os}}-${{ matrix.arch }}.tar.gz

  publish-release:
    name: Publish Release
    if: ${{ !inputs.draft }}
    needs:
      - create-release
      - build-and-upload
    runs-on: ubuntu-latest
    steps:
      - name: Publish GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release edit ${{ needs.create-release.outputs.tag_name }} --draft=false 